1. useMemo : 최적화를 위해 자주 사용하는 훅

memo는 메모이제이션을 뜻함
- 메모이제이션: 동일한 값을 리턴하는 함수를 반복적으로 호출해야 한다면 맨 처음 값을 계산 할 때 해당 값을 메모리에 저장해서 
필요할 때마다 또다시 계산하지 않고 메모리에서 꺼내서 재사용하는 기법!!

-- 간단히 설명하자면 - 자주 필요한 값을 맴 처음 계산 할 때 캐싱해둬서 그 값을 필요할 때마다 다시 계산을 하는게 아니라 캐시에서 꺼내서 사용

* 함수형 컴포넌트 렌더링이 될때마다 Component 함수 호출하고 모든 내부 변수 초기화 됨

* useMemo을 사용하면 더 간결하게 작성가능!
함수형 컴포넌트 렌더링 -> Component 함수 호출, Memoiztion -> 렌더링 -> Component 함수 호출, Memoize 된 값을 재사용하는

2. useMemo구조
useMemo는 두 개의 인자를 받음

const value = useMemo(() => {
    // 첫 번째 인자로는 콜백함수 -> 우리가 메모이제이션을 해줄 값을 계산해서 리턴해주는 함수
    // 콜백함수가 리턴하는 값이 useMemo가 리턴하는 값
    return calcutate();
    // 두 번째 인자로는 배열 - 의존성 배열
    // useMemo는 요소의 값이 업데이트 될때만 콜백함수를 다시 호출해서 메모이제이션 값을 업데이트 해서 다시 메모이제이션을 해줌
}, [item]); 


*자바스크립트 타입

원시(Primitive) 타입 |  객체(Object) 타입
- String           |  -> 원시 타입을 제외한 모든 것
- Number           |  - Object
- Boolean          |  - Array
- Null             |  ...
- Undefined        |
- Biglnt           |
- Symbol           |

3. useCallback : 컴포넌트 최적화
인자로 전달 한 콜백 함수 그 자체를 함수자체를 메모이제이션 해줌

useCallback 구조 - 
1 - useCallback은 두 개의 인자를 받음
2 - 하나의 인자는 메모이제이션 해줄 콜백함수
3 - 두 번째 인자는 의존성 배열을 받음

    // 함수를 useCallback으로 감싸주면 calcutate은 
예시. const calcutate = useCallback((num) => { 
    // 콜백함수 안의 값을 갖게 됨
    return num + 1;
    // 이렇게 메모이제이션 된 calcutate는 의존성 배열을 갖게 됨 (내부의 값이 변경 되지 않는 이상 다시 초기화 되지 않음)
},[item]);

